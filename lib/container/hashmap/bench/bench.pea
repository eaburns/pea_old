// Copyright Â© 2020 The Pea Authors under an MIT-style license.

Import "container/hashmap"
Import "hash"
Import "io"
Import "os/fs"
Import "os/time"
Import "primitive"

func [main |
	print: "start\n".
	words := readWords.
	print: words size asString + " words\n".

	maps (String, Int) Map& Array :=
		newArray: 10 init: [:_ | #hashmap new].

	print: "insert: ".
	time: [
		maps do: [:m |
			words doI: [:i :word | m at: word put: i].
		].
	].
	(maps at: 0) printStats.


	print: "remove: ".
	time: [
		maps do: [:m |
			words do: [:word | m remove: word].
		].
	].
]

func [time: f Nil Fun |
	start := #time now.
	f value.
	end := #time now.
	print: (end - start) asString + "\n".
]

func [readWords ^String Array|
	path := "/usr/share/dict/words".
	file := (#fs open path: path) ifError: [:e | panic: e errorMsg].
	r #io Reader := file.
	buf := r readAll ifError: [:e | panic: e errorMsg].
	file close ifError: [:e | panic: e errorMsg].

	nLines := 0.
	buf do: [:b | b = '\n' ifTrue: [nLines := nLines + 1]].

	lines String Array := newArray: nLines init: [:_ | ""].
	lineStart := 0.
	lineIndex := 0.
	buf doI: [:i :b |
		b = '\n' ifTrue: [
			line := newString: (buf from: lineStart to: i-1).
			lines at: lineIndex put: line.
			lineIndex := lineIndex + 1.
			lineStart := i + 1.
		]
	].
	^lines.
]